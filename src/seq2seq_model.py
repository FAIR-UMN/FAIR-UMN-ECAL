### This script defines the seq2seq model we are using
### We are using LSTM for Encoder & Decoder
import torch.nn as nn

class LSTM_Encoder(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers = 2):
        # Define LSTM-Encoder,
        # which will encode the time-series sequence to a latent code
        super(LSTM_Encoder, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.num_layers = num_layers

        # define LSTM layer
        self.lstm = nn.LSTM(input_size = input_size,
                            hidden_size = hidden_size,
                            num_layers = num_layers)

    def forward(self, x_input):
        lstm_out, self.hidden = self.lstm(x_input.view(x_input.shape[0], x_input.shape[1], self.input_size))
        return lstm_out, self.hidden     
    

class LSTM_Decoder(nn.Module):
    # Define LSTM-Decoder,
    # which will decode the latent code/hidden state generated by the LSTM-Encoder
    # Decodes hidden state output by encoder
    
    def __init__(self, input_size, hidden_size, num_layers = 2):
        super(LSTM_Decoder, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.num_layers = num_layers

        self.lstm = nn.LSTM(input_size = input_size,
                            hidden_size = hidden_size,
                            num_layers = num_layers)

        # here our output is only calibration, thus why the output dim is 1
        self.linear = nn.Linear(hidden_size, 1)

    def forward(self, x_input, encoder_hidden_states):
        lstm_out, self.hidden = self.lstm(x_input.unsqueeze(0), encoder_hidden_states)
        output = self.linear(lstm_out.squeeze(0))
        return output, self.hidden